#include <iostream>
#include <conio.h>
using namespace std;
//базовый класс
template <class Type> class Steck
{
public:
	virtual ~Steck() {}
	virtual bool isEmpty() = 0; //проверка
	virtual void push(Type value) = 0; //добавление
	virtual Type pop() = 0; //извлечение
};
//вектор
template <class Type> class VectorSteck : public Steck<Type>
{
	int _size;
	int top;
	Type* data;
public:
	VectorSteck() : _size(100), top(0) //конструктор
	{
		data = new Type[_size];
	}
	~VectorSteck() { delete[] data; } //деструктор
	virtual bool isEmpty() //проверка
	{
		//cout << "\n[я вектор]\n";
		return top == 0;
	}
	virtual void push(Type value) //добавление
	{
		data[top] = value;
		top++;
	}
	virtual Type pop() //извлечение
	{
		if (isEmpty()) { return 0; }
		top--;
		return data[top];
	}
};
template <class Type> struct NodeSteck
{
	Type data;
	NodeSteck<Type>* next;
};
//список
template <class Type> class ListSteck : public Steck<Type>
{
	NodeSteck<Type>* top; //указатель на вершину стека
public:
	ListSteck() { top = nullptr; } //конструктор
	~ListSteck() //деструктор
	{
		NodeSteck<Type>* temp;
		while (top)
		{
			temp = top;
			top = top->next;
			delete temp;
		}
	}
	virtual bool isEmpty() //проверка
	{
		//cout << "\n[я список]\n";
		return top == nullptr;
	}
	virtual void push(Type value) //добавление
	{
		NodeSteck<Type>* buff = new (nothrow) NodeSteck<Type>;
		if (buff == nullptr) return;
		buff->data = value;
		buff->next = top;
		top = buff;
	}
	virtual Type pop() //извлечение
	{
		if (!isEmpty())
		{
			NodeSteck<Type>* delet = top;
			Type temp = top->data;
			top = top->next;
			delet->next = nullptr;
			delete delet;
			return temp;
		}
		else
		{
			return Type();
		}
	}
};
template <class Type> void print_steck(Steck<Type>* point);
double _getnum();
int main()
{
	system("cls");
	setlocale(LC_ALL, "Russian");
	int action = 0;
	char _num;
	while (action != 1 && action != 2)
	{
		system("cls");
		cout << "Выберите структуру хранения:\n"
			"1.Вектор.\n"
			"2.Список.\n";
		action = _getnum();
	}
	Steck<double>* _dsteck;
	Steck<char>* _chsteck;
	if (action == 1)
	{
		_dsteck = new VectorSteck<double>; _chsteck = new
			VectorSteck<char>;
	}
	else
	{
		_dsteck = new ListSteck<double>;
		_chsteck = new ListSteck<char>;
	}
	while (action)
	{
		system("cls");
		cout << "<Тип double>\n";
		print_steck(_dsteck);
		cout << "1. Добавить элемент.\n"
			"2. Удалить элемент.\n\n";
		print_steck(_chsteck);
		cout << "<Тип char>\n"
			"3. Добавить элемент.\n"
			"4. Удалить элемент.\n\n\n"
			"0. Выход.\n";
		action = _getnum();
		switch (action)
		{
		case 1: _dsteck->push(_getnum()); break;
		case 2: if (_dsteck->isEmpty()) {
			cout << "Стек пуст.\n"; break; } _dsteck->pop(); break;
		case 3: cin >> _num; _chsteck->push(_num); break;
		case 4: if (_chsteck->isEmpty()) {
			cout << "Стек пуст.\n"; break; } _chsteck->pop(); break;
		}
			  system("pause");
		}
			  return 0;
		}
		template <class Type> void print_steck(Steck<Type>* point)
		{
			ListSteck<Type> temp;
			Type buff;
			while (!point->isEmpty())
			{
				buff = point->pop();
				cout << buff << " ";
				temp.push(buff);
			}
			cout << "\n";
			while (!temp.isEmpty()) { point->push(temp.pop()); }
		}
		double _getnum()
		{
			double value;
			cin >> value;
			if (cin.fail())
			{
				cin.clear();
				value = 0;
			}
			cin.ignore(32767, '\n');
			return value;
		}
